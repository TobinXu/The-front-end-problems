// reject一定会进入then的第二个回调函数（运行结束），如果then没有第二个回调会进入catch
var p1 = new Promise((resolve,reject) => {
    console.log('没有resolve')
    // throw new Error('手动返回错误')
    reject('失败了')
})
p1.then(data => {
    console.log('data=',data);
},err => {
    console.log('err=',err)
}).catch(
    res => {
        console.log('catch data=',data)
    }
)

// then中没有第二个回调情况
p1.then(data => {
    console.log('data=',data);
}).catch(
    res => {
        console.log('catch data=',res)
    }
)

//没有then 直接进入catch
p1.catch(
    res => {
        console.log('catch data=',res)
    }
)


// resolve一定会进入then的第一个回调，没有的话就不进入，肯定不进入catch
var p1 = new Promise((resolve,reject) => {
    console.log('resolve')
    // throw new Error('手动返回错误')
    resolve('成功了了')
})

p1.then(data => {
    console.log('data:',data)
},err => {
    console.log('err:'.err)
}).catch(
    res => {
        console('catch data:',res)
    }
)
